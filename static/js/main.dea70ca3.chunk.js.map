{"version":3,"sources":["utils/math.js","components/search-visualizer/search-visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["randomNumberGenerator","min","max","Math","floor","random","SearchVisualizer","state","array","algorithm","selectedAlgorithm","resetArray","i","push","num","visited","result","sort","a","b","setState","cleanArray","map","item","search","event","linearSearch","target","title","binarySearch","alert","timer","ms","Promise","res","setTimeout","setNewArrayWithDelay","delay","elementToSearch","items","start","end","length","mid","midItem","parseInt","startItem","endItem","getBackgroundElement","this","className","idx","backgroundColor","style","height","cursor","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.dea70ca3.chunk.js","sourcesContent":["export const randomNumberGenerator = (min, max) =>\r\n  Math.floor(Math.random() * (max - min + 1) + min);\r\n","import React, { Component } from 'react';\r\nimport { randomNumberGenerator } from '../../utils/math';\r\nimport './search-visualizer.css';\r\nclass SearchVisualizer extends Component {\r\n  state = {\r\n    array: [],\r\n    algorithm: ['linear-search', 'binary-search'],\r\n    selectedAlgorithm: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray = () => {\r\n    const array = [];\r\n    for (let i = 0; i <= 30; i += 1) {\r\n      array.push({\r\n        num: randomNumberGenerator(5, 1000),\r\n        visited: false,\r\n        result: false,\r\n      });\r\n    }\r\n    const { selectedAlgorithm } = this.state;\r\n    if (selectedAlgorithm === 1) {\r\n      array.sort((a, b) => a.num - b.num);\r\n    }\r\n    this.setState({\r\n      array,\r\n    });\r\n  };\r\n\r\n  cleanArray = async () => {\r\n    const { array } = this.state;\r\n    this.setState({\r\n      array: array.map((item) => ({\r\n        num: item.num,\r\n        visited: false,\r\n        result: false,\r\n      })),\r\n    });\r\n  };\r\n  search = async (event) => {\r\n    await this.cleanArray();\r\n    const { array, selectedAlgorithm } = this.state;\r\n    let result = false;\r\n    if (selectedAlgorithm === 0) {\r\n      result = await this.linearSearch(array, event.target.title);\r\n    } else {\r\n      result = await this.binarySearch(array, event.target.title);\r\n    }\r\n    if (!result) {\r\n      alert('Not able to find');\r\n    }\r\n  };\r\n\r\n  timer = (ms) => new Promise((res) => setTimeout(res, ms));\r\n\r\n  setNewArrayWithDelay = async (array, delay) => {\r\n    await this.timer(delay);\r\n    await this.setState({\r\n      array,\r\n    });\r\n  };\r\n  binarySearch = async (array, elementToSearch) => {\r\n    let items = [...array];\r\n    let start = 0,\r\n      end = items.length - 1;\r\n\r\n    // Iterate while start not meets end\r\n    while (start <= end) {\r\n      // Find the mid index\r\n\r\n      let mid = Math.floor((start + end) / 2);\r\n      let midItem = { ...items[mid] };\r\n      midItem.visited = true;\r\n      items[mid] = midItem;\r\n      await this.setNewArrayWithDelay(items, 1000);\r\n\r\n      // If element is present at mid, return True\r\n      if (items[mid].num === parseInt(elementToSearch)) {\r\n        midItem.result = true;\r\n        items[mid] = midItem;\r\n        await this.setNewArrayWithDelay(items, 1000);\r\n        return true;\r\n      }\r\n\r\n      // Else look in left or right half accordingly\r\n      else if (items[mid].num < parseInt(elementToSearch)) {\r\n        start = mid + 1;\r\n\r\n        let startItem = { ...items[start] };\r\n        startItem.visited = true;\r\n        items[start] = startItem;\r\n        let endItem = { ...items[end] };\r\n        endItem.visited = true;\r\n        items[end] = endItem;\r\n        await this.setNewArrayWithDelay(items, 1000);\r\n      } else {\r\n        let startItem = { ...items[start] };\r\n        startItem.visited = true;\r\n        items[start] = startItem;\r\n        let endItem = { ...items[end] };\r\n        endItem.visited = true;\r\n        items[end] = endItem;\r\n        await this.setNewArrayWithDelay(items, 1000);\r\n        end = mid - 1;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n  linearSearch = async (array, elementToSearch) => {\r\n    let items = [...array];\r\n    for (let i = 0; i < items.length; i++) {\r\n      let item = { ...items[i] };\r\n      item.visited = true;\r\n      items[i] = item;\r\n\r\n      if (items[i].num === parseInt(elementToSearch)) {\r\n        item.result = true;\r\n        items[i] = item;\r\n        await this.setNewArrayWithDelay(items, 1000);\r\n        return true;\r\n      }\r\n      await this.setNewArrayWithDelay(items, 1000);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  getBackgroundElement = (visited, result) => {\r\n    if (visited && result) {\r\n      return '#8bcf0c';\r\n    }\r\n    if (visited) {\r\n      return '#0c9ecf';\r\n    }\r\n    return '#181e54';\r\n  };\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"chart\">\r\n          {array.map(({ num, visited, result }, idx) => {\r\n            const backgroundColor = this.getBackgroundElement(visited, result);\r\n            return (\r\n              <div\r\n                key={idx}\r\n                className=\"bar\"\r\n                title={num}\r\n                style={{\r\n                  height: `${num}px`,\r\n                  backgroundColor,\r\n                  cursor: 'pointer',\r\n                }}\r\n                onClick={this.search}\r\n              >\r\n                {num}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchVisualizer;\r\n","import './App.css';\nimport React from 'react';\nimport SearchVisualizer from './components/search-visualizer/search-visualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}